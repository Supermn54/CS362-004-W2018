        -:    0:Source:cardTest1.c
        -:    0:Graph:cardTest1.gcno
        -:    0:Data:cardTest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***************************
        -:    2: * unit test for Smithy
        -:    3: * ************************/
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:#include <stdlib.h>
        -:   12:
        -:   13:
        -:   14:#define TESTCARD "smithy"
        -:   15:
        1:   16:int main() {
        -:   17:
        -:   18:   //initialize variables
        1:   19:   int numPlayers = 2;
        1:   20:   int seed = 10;
        1:   21:   int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   22:   int newCards = 0;
        1:   23:   int discard = 1;
        1:   24:   int shuffledCards = 0;
        1:   25:   int thisPlayer = 0;
        1:   26:   int testH1 = 0, testH2 = 0, testD1 = 0, testD2 = 0;
        -:   27:
        -:   28:   //initialize struct gamstate
        -:   29:   struct gameState G, testG;
        -:   30:
        -:   31:   //initialize kingdom cards
        1:   32:   int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   33:
        -:   34:
        -:   35:   //initialize game state and player cards
        1:   36:   initializeGame(numPlayers, k, seed, &G);
        -:   37:   
        1:   38:   printf("----- Testing Card: %s -----\n", TESTCARD);
        -:   39:
        -:   40:   //Test 1: choice1 = 1 = +3 cards
        -:   41:
        1:   42:   printf("----- TEST: choice1 = 1 = +3 cards\n");
        -:   43:
        -:   44:   //copy game states for test case
        1:   45:   memcpy(&testG, &G, sizeof(struct gameState));
        1:   46:   choice1 = 1;
        1:   47:   cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   48:   newCards = 3;
        1:   49:   testH1 = testG.handCount[thisPlayer];
        1:   50:   testH2 = G.handCount[thisPlayer] + newCards - discard;
        1:   51:   testD1 = testG.deckCount[thisPlayer];
        1:   52:   testD2 = G.deckCount[thisPlayer] - newCards + shuffledCards;
        -:   53:
        -:   54:   //print results in test case to confirm hand count
        1:   55:   printf("hand count = %d, expected = %d\n", testH1, testH2);
        -:   56:
        -:   57:   //print results in test case to confirm deck count
        1:   58:   printf("deck count = %d, expected = %d\n", testD1, testD2);
        -:   59:
        -:   60:
        1:   61:   if(testH1 == testH2 && testD1 == testD2){
    #####:   62:	printf("TEST SUCCSESFULLY COMPLETED\n");
        -:   63:   }
        -:   64:   else{
        1:   65:   	printf("TEST FAILED\n");
        -:   66:   }
        -:   67:
        -:   68:
        -:   69:   
        -:   70:   
        1:   71:   return 0;
        -:   72:
        -:   73:}
        -:   74:
        -:   75:
