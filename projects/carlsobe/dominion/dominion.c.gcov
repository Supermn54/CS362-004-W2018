        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 44685 returned 100% blocks executed 83%
    44685:    8:int compare(const void* a, const void* b) {
    44685:    8-block  0
    44685:    9:  if (*(int*)a > *(int*)b)
    44685:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 44685
    #####:   10:    return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
    44685:   11:  if (*(int*)a < *(int*)b)
    44685:   11-block  0
branch  0 taken 11916 (fallthrough)
branch  1 taken 32769
    11916:   12:    return -1;
    11916:   12-block  0
unconditional  0 taken 11916
    32769:   13:  return 0;
    32769:   13-block  0
unconditional  0 taken 32769
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 89%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     1000:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
     1000:   44-block  0
call    0 returned 1000
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 1000
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1000 (fallthrough)
branch  1 taken 0
     1000:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1000
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
     1000:   57-block  0
unconditional  0 taken 1000
    10000:   57-block  1
unconditional  1 taken 10000
    11000:   57-block  2
branch  2 taken 10000
branch  3 taken 1000 (fallthrough)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
    10000:   59-block  0
unconditional  0 taken 10000
   100000:   59-block  1
unconditional  1 taken 100000
   110000:   59-block  2
branch  2 taken 100000
branch  3 taken 10000 (fallthrough)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   100000:   61-block  0
branch  0 taken 90000 (fallthrough)
branch  1 taken 10000
    90000:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 90000
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
     1000:   73-block  0
branch  0 taken 349 (fallthrough)
branch  1 taken 651
        -:   74:    {
      349:   75:      state->supplyCount[curse] = 10;
      349:   75-block  0
unconditional  0 taken 349
        -:   76:    }
      651:   77:  else if (numPlayers == 3)
      651:   77-block  0
branch  0 taken 323 (fallthrough)
branch  1 taken 328
        -:   78:    {
      323:   79:      state->supplyCount[curse] = 20;
      323:   79-block  0
unconditional  0 taken 323
        -:   80:    }
        -:   81:  else
        -:   82:    {
      328:   83:      state->supplyCount[curse] = 30;
      328:   83-block  0
unconditional  0 taken 328
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
     1000:   87-block  0
branch  0 taken 349 (fallthrough)
branch  1 taken 651
        -:   88:    {
      349:   89:      state->supplyCount[estate] = 8;
      349:   90:      state->supplyCount[duchy] = 8;
      349:   91:      state->supplyCount[province] = 8;
      349:   91-block  0
unconditional  0 taken 349
        -:   92:    }
        -:   93:  else
        -:   94:    {
      651:   95:      state->supplyCount[estate] = 12;
      651:   96:      state->supplyCount[duchy] = 12;
      651:   97:      state->supplyCount[province] = 12;
      651:   97-block  0
unconditional  0 taken 651
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     1000:  106-block  0
unconditional  0 taken 1000
    20000:  106-block  1
unconditional  1 taken 20000
    21000:  106-block  2
branch  2 taken 20000
branch  3 taken 1000 (fallthrough)
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    20000:  108-block  0
unconditional  0 taken 20000
   145000:  108-block  1
unconditional  1 taken 145000
   165000:  108-block  2
branch  2 taken 155000
branch  3 taken 10000 (fallthrough)
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
   155000:  110-block  0
branch  0 taken 10000 (fallthrough)
branch  1 taken 145000
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    10000:  113-block  0
branch  0 taken 10000 (fallthrough)
branch  1 taken 0
    10000:  113-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 10000
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
unconditional  2 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
unconditional  0 never executed
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
unconditional  0 never executed
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    10000:  122:		  state->supplyCount[i] = 10;
    10000:  122-block  0
unconditional  0 taken 10000
        -:  123:		}
    10000:  124:	      break;
    10000:  124-block  0
unconditional  0 taken 10000
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3979:  138:  for (i = 0; i < numPlayers; i++)
     1000:  138-block  0
unconditional  0 taken 1000
     2979:  138-block  1
unconditional  1 taken 2979
     3979:  138-block  2
branch  2 taken 2979
branch  3 taken 1000 (fallthrough)
        -:  139:    {
     2979:  140:      state->deckCount[i] = 0;
    11916:  141:      for (j = 0; j < 3; j++)
     2979:  141-block  0
unconditional  0 taken 2979
     8937:  141-block  1
unconditional  1 taken 8937
    11916:  141-block  2
branch  2 taken 8937
branch  3 taken 2979 (fallthrough)
        -:  142:	{
     8937:  143:	  state->deck[i][j] = estate;
     8937:  144:	  state->deckCount[i]++;
        -:  145:	}
    23832:  146:      for (j = 3; j < 10; j++)
     2979:  146-block  0
unconditional  0 taken 2979
    20853:  146-block  1
unconditional  1 taken 20853
    23832:  146-block  2
branch  2 taken 20853
branch  3 taken 2979 (fallthrough)
        -:  147:	{
    20853:  148:	  state->deck[i][j] = copper;
    20853:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3979:  154:  for (i = 0; i < numPlayers; i++)
     1000:  154-block  0
unconditional  0 taken 1000
     2979:  154-block  1
unconditional  1 taken 2979
     3979:  154-block  2
branch  2 taken 2979
branch  3 taken 1000 (fallthrough)
        -:  155:    {
     2979:  156:      if ( shuffle(i, state) < 0 )
     2979:  156-block  0
call    0 returned 2979
branch  1 taken 0 (fallthrough)
branch  2 taken 2979
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3979:  163:  for (i = 0; i < numPlayers; i++)
     1000:  163-block  0
unconditional  0 taken 1000
     2979:  163-block  1
unconditional  1 taken 2979
     3979:  163-block  2
branch  2 taken 2979
branch  3 taken 1000 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2979:  166:      state->handCount[i] = 0;
     2979:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
     1000:  176-block  0
unconditional  0 taken 1000
    27000:  176-block  1
unconditional  1 taken 27000
    28000:  176-block  2
branch  2 taken 27000
branch  3 taken 1000 (fallthrough)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
     1000:  192-block  0
unconditional  0 taken 1000
unconditional  1 taken 5000
     6000:  192-block  1
branch  2 taken 5000
branch  3 taken 1000 (fallthrough)
     5000:  193:    drawCard(state->whoseTurn, state);
     5000:  193-block  0
call    0 returned 5000
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
     1000:  196-block  0
call    0 returned 1000
        -:  197:
     1000:  198:  return 0;
unconditional  0 taken 1000
        -:  199:}
        -:  200:
function shuffle called 3469 returned 100% blocks executed 100%
     3469:  201:int shuffle(int player, struct gameState *state) {
     3469:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3469:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3469:  209:  if (state->deckCount[player] < 1)
     3469:  209-block  0
branch  0 taken 490 (fallthrough)
branch  1 taken 2979
      490:  210:    return -1;
      490:  210-block  0
unconditional  0 taken 490
     2979:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
     2979:  211-block  0
call    0 returned 2979
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    32769:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 2979
    32769:  214-block  0
branch  1 taken 29790
branch  2 taken 2979 (fallthrough)
    29790:  215:    card = floor(Random() * state->deckCount[player]);
    29790:  215-block  0
call    0 returned 29790
    29790:  216:    newDeck[newDeckPos] = state->deck[player][card];
    29790:  217:    newDeckPos++;
    87036:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 29790
    57246:  218-block  0
unconditional  1 taken 57246
    87036:  218-block  1
branch  2 taken 57246
branch  3 taken 29790 (fallthrough)
    57246:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    29790:  221:    state->deckCount[player]--;
    29790:  221-block  0
unconditional  0 taken 29790
        -:  222:  }
    32769:  223:  for (i = 0; i < newDeckPos; i++) {
     2979:  223-block  0
unconditional  0 taken 2979
    29790:  223-block  1
unconditional  1 taken 29790
    32769:  223-block  2
branch  2 taken 29790
branch  3 taken 2979 (fallthrough)
    29790:  224:    state->deck[player][i] = newDeck[i];
    29790:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3469:  228:  return 0;
     2979:  228-block  0
unconditional  0 taken 2979
     3469:  228-block  1
unconditional  1 taken 3469
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 248884 returned 100% blocks executed 100%
   248884:  311:int numHandCards(struct gameState *state) {
   248884:  311-block  0
   248884:  312:  return state->handCount[ whoseTurn(state) ];
   248884:  312-block  0
call    0 returned 248884
unconditional  1 taken 248884
        -:  313:}
        -:  314:
function handCard called 724768 returned 100% blocks executed 100%
   724768:  315:int handCard(int handPos, struct gameState *state) {
   724768:  315-block  0
   724768:  316:  int currentPlayer = whoseTurn(state);
   724768:  316-block  0
call    0 returned 724768
   724768:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 taken 724768
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
unconditional  1 never executed
    $$$$$:  328-block  2
branch  2 never executed
branch  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
unconditional  2 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
unconditional  0 never executed
    $$$$$:  333-block  1
unconditional  1 never executed
    $$$$$:  333-block  2
branch  2 never executed
branch  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
unconditional  2 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
unconditional  0 never executed
    $$$$$:  338-block  1
unconditional  1 never executed
    $$$$$:  338-block  2
branch  2 never executed
branch  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
unconditional  2 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 975652 returned 100% blocks executed 100%
   975652:  346:int whoseTurn(struct gameState *state) {
   975652:  346-block  0
   975652:  347:  return state->whoseTurn;
   975652:  347-block  0
unconditional  0 taken 975652
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
unconditional  0 never executed
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
unconditional  0 never executed
    $$$$$:  402-block  1
unconditional  1 never executed
    $$$$$:  402-block  2
branch  2 never executed
branch  3 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
unconditional  0 never executed
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
unconditional  0 never executed
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 128304 returned 100% blocks executed 85%
   128304:  525:int drawCard(int player, struct gameState *state)
   128304:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
   128304:  528:  if (state->deckCount[player] <= 0){//Deck is empty
   128304:  528-block  0
branch  0 taken 245 (fallthrough)
branch  1 taken 128059
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      245:  533:    for (i = 0; i < state->discardCount[player];i++){
      245:  533-block  0
unconditional  0 taken 245
    $$$$$:  533-block  1
unconditional  1 never executed
      245:  533-block  2
branch  2 taken 0
branch  3 taken 245 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      245:  538:    state->deckCount[player] = state->discardCount[player];
      245:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      245:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
      245:  542-block  0
call    0 returned 245
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      245:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      245:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 245
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      245:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      245:  559:    if (deckCounter == 0)
      245:  559-block  0
branch  0 taken 245 (fallthrough)
branch  1 taken 0
      245:  560:      return -1;
      245:  560-block  0
unconditional  0 taken 245
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    $$$$$:  564-block  0
unconditional  0 never executed
        -:  565:  }
        -:  566:
        -:  567:  else{
   128059:  568:    int count = state->handCount[player];//Get current hand count for player
   128059:  568-block  0
unconditional  0 taken 128059
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   128059:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   128059:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   128059:  576:    state->deckCount[player]--;
   128059:  577:    state->handCount[player]++;//Increment hand count
   128059:  577-block  0
unconditional  0 taken 128059
        -:  578:  }
        -:  579:
   128059:  580:  return 0;
   128059:  580-block  0
unconditional  0 taken 128059
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
function cardEffect called 1000 returned 100% blocks executed 3%
     1000:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     1000:  646-block  0
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     1000:  653:  int currentPlayer = whoseTurn(state);
     1000:  653-block  0
call    0 returned 1000
     1000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     1000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     1000:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 1000
    #####:  659:    nextPlayer = 0;
    $$$$$:  659-block  0
unconditional  0 never executed
        -:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
     1000:  664:  switch( card ) 
     1000:  664-block  0
branch  0 taken 1000
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
        -:  665:    {
        -:  666:    case adventurer:
     1000:  667:       adventurerRef(currentPlayer, state);
     1000:  667-block  0
call    0 returned 1000
     1000:  668:       break;
unconditional  0 taken 1000
        -:  669:			
        -:  670:    case council_room:
        -:  671:      //+4 Cards
    #####:  672:      for (i = 0; i < 4; i++)
    $$$$$:  672-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  672-block  1
branch  2 never executed
branch  3 never executed
        -:  673:	{
    #####:  674:	  drawCard(currentPlayer, state);
    $$$$$:  674-block  0
call    0 never executed
        -:  675:	}
        -:  676:			
        -:  677:      //+1 Buy
    #####:  678:      state->numBuys++;
        -:  679:			
        -:  680:      //Each other player draws a card
    #####:  681:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  681-block  0
unconditional  0 never executed
    $$$$$:  681-block  1
unconditional  1 never executed
    $$$$$:  681-block  2
branch  2 never executed
branch  3 never executed
        -:  682:	{
    #####:  683:	  if ( i != currentPlayer )
    $$$$$:  683-block  0
branch  0 never executed
branch  1 never executed
        -:  684:	    {
    #####:  685:	      drawCard(i, state);
    $$$$$:  685-block  0
call    0 never executed
unconditional  1 never executed
        -:  686:	    }
        -:  687:	}
        -:  688:			
        -:  689:      //put played card in played card pile
    #####:  690:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  690-block  0
call    0 never executed
        -:  691:			
    #####:  692:      return 0;
unconditional  0 never executed
        -:  693:			
        -:  694:    case feast:
        -:  695:      //gain card with cost up to 5
        -:  696:      //Backup hand
    #####:  697:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  697-block  0
unconditional  0 never executed
    $$$$$:  697-block  1
unconditional  1 never executed
    $$$$$:  697-block  2
branch  2 never executed
branch  3 never executed
    #####:  698:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:      }
        -:  701:      //Backup hand
        -:  702:
        -:  703:      //Update Coins for Buy
    #####:  704:      updateCoins(currentPlayer, state, 5);
    $$$$$:  704-block  0
call    0 never executed
    #####:  705:      x = 1;//Condition to loop on
    #####:  706:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  706-block  0
branch  1 never executed
branch  2 never executed
    #####:  707:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  707-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  708:	  if (DEBUG)
        -:  709:	    printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:	  if (DEBUG){
        -:  712:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  713:	  }
        -:  714:	}
    #####:  715:	else if (state->coins < getCost(choice1)){
    $$$$$:  715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  716:	  printf("That card is too expensive!\n");
    $$$$$:  716-block  0
call    0 never executed
unconditional  1 never executed
        -:  717:
        -:  718:	  if (DEBUG){
        -:  719:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  720:	  }
        -:  721:	}
        -:  722:	else{
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:	  }
        -:  727:
    #####:  728:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  728-block  0
call    0 never executed
    #####:  729:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:	  }
        -:  734:
        -:  735:	}
        -:  736:      }     
        -:  737:
        -:  738:      //Reset Hand
    #####:  739:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  739-block  0
unconditional  0 never executed
    $$$$$:  739-block  1
unconditional  1 never executed
    $$$$$:  739-block  2
branch  2 never executed
branch  3 never executed
    #####:  740:	state->hand[currentPlayer][i] = temphand[i];
    #####:  741:	temphand[i] = -1;
        -:  742:      }
        -:  743:      //Reset Hand
        -:  744:      			
    #####:  745:      return 0;
    $$$$$:  745-block  0
unconditional  0 never executed
        -:  746:			
        -:  747:    case gardens:
    #####:  748:      return -1;
    $$$$$:  748-block  0
unconditional  0 never executed
        -:  749:			
        -:  750:    case mine:
    #####:  751:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  752:
    #####:  753:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  753-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  753-block  1
branch  2 never executed
branch  3 never executed
        -:  754:	{
    #####:  755:	  return -1;
    $$$$$:  755-block  0
unconditional  0 never executed
        -:  756:	}
        -:  757:		
    #####:  758:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  758-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  758-block  1
branch  2 never executed
branch  3 never executed
        -:  759:	{
    #####:  760:	  return -1;
    $$$$$:  760-block  0
unconditional  0 never executed
        -:  761:	}
        -:  762:
    #####:  763:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  763-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  764:	{
    #####:  765:	  return -1;
    $$$$$:  765-block  0
unconditional  0 never executed
        -:  766:	}
        -:  767:
    #####:  768:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  768-block  0
call    0 never executed
        -:  769:
        -:  770:      //discard card from hand
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  772:
        -:  773:      //discard trashed card
    #####:  774:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  774-block  0
unconditional  1 never executed
    $$$$$:  774-block  1
branch  2 never executed
branch  3 never executed
        -:  775:	{
    #####:  776:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  776-block  0
branch  0 never executed
branch  1 never executed
        -:  777:	    {
    #####:  778:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  778-block  0
call    0 never executed
    #####:  779:	      break;
unconditional  0 never executed
        -:  780:	    }
        -:  781:	}
        -:  782:			
    #####:  783:      return 0;
    $$$$$:  783-block  0
unconditional  0 never executed
        -:  784:			
        -:  785:    case remodel:
    #####:  786:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  787:
    #####:  788:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  788-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  789:	{
    #####:  790:	  return -1;
    $$$$$:  790-block  0
unconditional  0 never executed
        -:  791:	}
        -:  792:
    #####:  793:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  793-block  0
call    0 never executed
        -:  794:
        -:  795:      //discard card from hand
    #####:  796:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  797:
        -:  798:      //discard trashed card
    #####:  799:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  799-block  0
unconditional  1 never executed
    $$$$$:  799-block  1
branch  2 never executed
branch  3 never executed
        -:  800:	{
    #####:  801:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  801-block  0
branch  0 never executed
branch  1 never executed
        -:  802:	    {
    #####:  803:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  803-block  0
call    0 never executed
    #####:  804:	      break;
unconditional  0 never executed
        -:  805:	    }
        -:  806:	}
        -:  807:
        -:  808:
    #####:  809:      return 0;
    $$$$$:  809-block  0
unconditional  0 never executed
        -:  810:		
        -:  811:    case smithy:
    #####:  812:      smithyRef(currentPlayer, state, handPos);
    $$$$$:  812-block  0
call    0 never executed
    #####:  813:      break;
unconditional  0 never executed
        -:  814:		
        -:  815:    case village:
    #####:  816:	villageRef(currentPlayer, state);
    $$$$$:  816-block  0
call    0 never executed
    #####:  817:	break;
unconditional  0 never executed
        -:  818:
        -:  819:    case baron:
    #####:  820:      state->numBuys++;//Increase buys by 1!
    #####:  821:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  821-block  0
branch  0 never executed
branch  1 never executed
    #####:  822:	int p = 0;//Iterator for hand!
    #####:  823:	int card_not_discarded = 1;//Flag for discard set!
    #####:  824:	while(card_not_discarded){
    $$$$$:  824-block  0
unconditional  0 never executed
    $$$$$:  824-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  824-block  2
unconditional  3 never executed
    #####:  825:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  825-block  0
branch  0 never executed
branch  1 never executed
    #####:  826:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  827:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  828:	    state->discardCount[currentPlayer]++;
    #####:  829:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  829-block  0
unconditional  0 never executed
    $$$$$:  829-block  1
unconditional  1 never executed
    $$$$$:  829-block  2
branch  2 never executed
branch  3 never executed
    #####:  830:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  831:	    }
    #####:  832:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  833:	    state->handCount[currentPlayer]--;
    #####:  834:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  834-block  0
unconditional  0 never executed
        -:  835:	  }
    #####:  836:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  836-block  0
branch  0 never executed
branch  1 never executed
        -:  837:	    if(DEBUG) {
        -:  838:	      printf("No estate cards in your hand, invalid choice\n");
        -:  839:	      printf("Must gain an estate if there are any\n");
        -:  840:	    }
    #####:  841:	    if (supplyCount(estate, state) > 0){
    $$$$$:  841-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  842-block  0
call    0 never executed
    #####:  843:	      state->supplyCount[estate]--;//Decrement estates
    #####:  844:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:		isGameOver(state);
    $$$$$:  845-block  0
call    0 never executed
unconditional  1 never executed
        -:  846:	      }
        -:  847:	    }
    #####:  848:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  848-block  0
unconditional  0 never executed
        -:  849:	  }
        -:  850:			    
        -:  851:	  else{
    #####:  852:	    p++;//Next card
    $$$$$:  852-block  0
unconditional  0 never executed
        -:  853:	  }
        -:  854:	}
        -:  855:      }
        -:  856:			    
        -:  857:      else{
    #####:  858:	if (supplyCount(estate, state) > 0){
    $$$$$:  858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  859:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  861:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  862:	    isGameOver(state);
    $$$$$:  862-block  0
call    0 never executed
unconditional  1 never executed
        -:  863:	  }
        -:  864:	}
        -:  865:      }
        -:  866:	    
        -:  867:      
    #####:  868:      return 0;
    $$$$$:  868-block  0
unconditional  0 never executed
        -:  869:		
        -:  870:    case great_hall:
        -:  871:      //+1 Card
    #####:  872:      drawCard(currentPlayer, state);
    $$$$$:  872-block  0
call    0 never executed
        -:  873:			
        -:  874:      //+1 Actions
    #####:  875:      state->numActions++;
        -:  876:			
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  879:      return 0;
unconditional  0 never executed
        -:  880:		
        -:  881:    case minion:
        -:  882:      //+1 action
    #####:  883:      state->numActions++;
        -:  884:			
        -:  885:      //discard card from hand
    #####:  886:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  886-block  0
call    0 never executed
        -:  887:			
    #####:  888:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  889:	{
    #####:  890:	  state->coins = state->coins + 2;
    $$$$$:  890-block  0
unconditional  0 never executed
        -:  891:	}
        -:  892:			
    #####:  893:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  893-block  0
branch  0 never executed
branch  1 never executed
        -:  894:	{
        -:  895:	  //discard hand
    #####:  896:	  while(numHandCards(state) > 0)
    $$$$$:  896-block  0
unconditional  0 never executed
    $$$$$:  896-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	    {
    #####:  898:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  898-block  0
call    0 never executed
unconditional  1 never executed
        -:  899:	    }
        -:  900:				
        -:  901:	  //draw 4
    #####:  902:	  for (i = 0; i < 4; i++)
    $$$$$:  902-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  902-block  1
branch  2 never executed
branch  3 never executed
        -:  903:	    {
    #####:  904:	      drawCard(currentPlayer, state);
    $$$$$:  904-block  0
call    0 never executed
        -:  905:	    }
        -:  906:				
        -:  907:	  //other players discard hand and redraw if hand size > 4
    #####:  908:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  908-block  0
unconditional  0 never executed
    $$$$$:  908-block  1
unconditional  1 never executed
    $$$$$:  908-block  2
branch  2 never executed
branch  3 never executed
        -:  909:	    {
    #####:  910:	      if (i != currentPlayer)
    $$$$$:  910-block  0
branch  0 never executed
branch  1 never executed
        -:  911:		{
    #####:  912:		  if ( state->handCount[i] > 4 )
    $$$$$:  912-block  0
branch  0 never executed
branch  1 never executed
        -:  913:		    {
        -:  914:		      //discard hand
    #####:  915:		      while( state->handCount[i] > 0 )
    $$$$$:  915-block  0
unconditional  0 never executed
    $$$$$:  915-block  1
branch  1 never executed
branch  2 never executed
        -:  916:			{
    #####:  917:			  discardCard(handPos, i, state, 0);
    $$$$$:  917-block  0
call    0 never executed
unconditional  1 never executed
        -:  918:			}
        -:  919:							
        -:  920:		      //draw 4
    #####:  921:		      for (j = 0; j < 4; j++)
    $$$$$:  921-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  921-block  1
branch  2 never executed
branch  3 never executed
        -:  922:			{
    #####:  923:			  drawCard(i, state);
    $$$$$:  923-block  0
call    0 never executed
        -:  924:			}
        -:  925:		    }
        -:  926:		}
        -:  927:	    }
        -:  928:				
        -:  929:	}
    #####:  930:      return 0;
    $$$$$:  930-block  0
unconditional  0 never executed
        -:  931:		
        -:  932:    case steward:
    #####:  933:	stewardRef(currentPlayer, state, choice1, choice2, choice3, handPos);
    $$$$$:  933-block  0
call    0 never executed
    #####:  934:	break;
unconditional  0 never executed
        -:  935:
        -:  936:    case tribute:
    #####:  937:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$:  937-block  0
branch  0 never executed
branch  1 never executed
    #####:  938:	if (state->deckCount[nextPlayer] > 0){
    $$$$$:  938-block  0
branch  0 never executed
branch  1 never executed
    #####:  939:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  940:	  state->deckCount[nextPlayer]--;
    $$$$$:  940-block  0
unconditional  0 never executed
        -:  941:	}
    #####:  942:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$:  942-block  0
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  944:	  state->discardCount[nextPlayer]--;
    $$$$$:  944-block  0
unconditional  0 never executed
        -:  945:	}
        -:  946:	else{
        -:  947:	  //No Card to Reveal
        -:  948:	  if (DEBUG){
        -:  949:	    printf("No cards to reveal\n");
        -:  950:	  }
        -:  951:	}
        -:  952:      }
        -:  953:	    
        -:  954:      else{
    #####:  955:	if (state->deckCount[nextPlayer] == 0){
    $$$$$:  955-block  0
branch  0 never executed
branch  1 never executed
    #####:  956:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$:  956-block  0
unconditional  0 never executed
    $$$$$:  956-block  1
unconditional  1 never executed
    $$$$$:  956-block  2
branch  2 never executed
branch  3 never executed
    #####:  957:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  958:	    state->deckCount[nextPlayer]++;
    #####:  959:	    state->discard[nextPlayer][i] = -1;
    #####:  960:	    state->discardCount[nextPlayer]--;
        -:  961:	  }
        -:  962:			    
    #####:  963:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$:  963-block  0
call    0 never executed
unconditional  1 never executed
        -:  964:	} 
    #####:  965:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  966:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  967:	state->deckCount[nextPlayer]--;
    #####:  968:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  969:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  970:	state->deckCount[nextPlayer]--;
    $$$$$:  970-block  0
unconditional  0 never executed
        -:  971:      }    
        -:  972:		       
    #####:  973:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$:  973-block  0
branch  0 never executed
branch  1 never executed
    #####:  974:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  975:	state->playedCardCount++;
    #####:  976:	tributeRevealedCards[1] = -1;
    $$$$$:  976-block  0
unconditional  0 never executed
        -:  977:      }
        -:  978:
    #####:  979:      for (i = 0; i <= 2; i ++){
    $$$$$:  979-block  0
unconditional  0 never executed
    $$$$$:  979-block  1
unconditional  1 never executed
    $$$$$:  979-block  2
branch  2 never executed
branch  3 never executed
    #####:  980:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$:  980-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  980-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  980-block  2
branch  4 never executed
branch  5 never executed
    #####:  981:	  state->coins += 2;
    $$$$$:  981-block  0
unconditional  0 never executed
        -:  982:	}
        -:  983:		    
    #####:  984:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  984-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  984-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  984-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  984-block  4
branch  8 never executed
branch  9 never executed
    #####:  985:	  drawCard(currentPlayer, state);
    $$$$$:  985-block  0
call    0 never executed
    #####:  986:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  987:	}
        -:  988:	else{//Action Card
    #####:  989:	  state->numActions = state->numActions + 2;
    $$$$$:  989-block  0
unconditional  0 never executed
        -:  990:	}
        -:  991:      }
        -:  992:	    
    #####:  993:      return 0;
    $$$$$:  993-block  0
unconditional  0 never executed
        -:  994:		
        -:  995:    case ambassador:
    #####:  996:      j = 0;		//used to check if player has enough cards to discard
        -:  997:
    #####:  998:      if (choice2 > 2 || choice2 < 0)
    $$$$$:  998-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  998-block  1
branch  2 never executed
branch  3 never executed
        -:  999:	{
    #####: 1000:	  return -1;				
    $$$$$: 1000-block  0
unconditional  0 never executed
        -: 1001:	}
        -: 1002:
    #####: 1003:      if (choice1 == handPos)
    $$$$$: 1003-block  0
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  return -1;
    $$$$$: 1005-block  0
unconditional  0 never executed
        -: 1006:	}
        -: 1007:
    #####: 1008:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1008-block  0
unconditional  0 never executed
    $$$$$: 1008-block  1
unconditional  1 never executed
    $$$$$: 1008-block  2
branch  2 never executed
branch  3 never executed
        -: 1009:	{
    #####: 1010:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1010-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1010-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1010-block  2
branch  4 never executed
branch  5 never executed
        -: 1011:	    {
    #####: 1012:	      j++;
    $$$$$: 1012-block  0
unconditional  0 never executed
        -: 1013:	    }
        -: 1014:	}
    #####: 1015:      if (j < choice2)
    $$$$$: 1015-block  0
branch  0 never executed
branch  1 never executed
        -: 1016:	{
    #####: 1017:	  return -1;				
    $$$$$: 1017-block  0
unconditional  0 never executed
        -: 1018:	}
        -: 1019:
        -: 1020:      if (DEBUG) 
        -: 1021:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1022:
        -: 1023:      //increase supply count for choosen card by amount being discarded
    #####: 1024:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1025:			
        -: 1026:      //each other player gains a copy of revealed card
    #####: 1027:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1027-block  0
unconditional  0 never executed
    $$$$$: 1027-block  1
unconditional  1 never executed
    $$$$$: 1027-block  2
branch  2 never executed
branch  3 never executed
        -: 1028:	{
    #####: 1029:	  if (i != currentPlayer)
    $$$$$: 1029-block  0
branch  0 never executed
branch  1 never executed
        -: 1030:	    {
    #####: 1031:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1031-block  0
call    0 never executed
unconditional  1 never executed
        -: 1032:	    }
        -: 1033:	}
        -: 1034:
        -: 1035:      //discard played card from hand
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1036-block  0
call    0 never executed
        -: 1037:
        -: 1038:      //trash copies of cards returned to supply
    #####: 1039:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1039-block  0
unconditional  1 never executed
    $$$$$: 1039-block  1
branch  2 never executed
branch  3 never executed
        -: 1040:	{
    #####: 1041:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1041-block  0
unconditional  0 never executed
    $$$$$: 1041-block  1
unconditional  1 never executed
    $$$$$: 1041-block  2
branch  2 never executed
branch  3 never executed
        -: 1042:	    {
    #####: 1043:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1043-block  0
branch  0 never executed
branch  1 never executed
        -: 1044:		{
    #####: 1045:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1045-block  0
call    0 never executed
    #####: 1046:		  break;
unconditional  0 never executed
        -: 1047:		}
        -: 1048:	    }
        -: 1049:	}			
        -: 1050:
    #####: 1051:      return 0;
    $$$$$: 1051-block  0
unconditional  0 never executed
        -: 1052:		
        -: 1053:    case cutpurse:
        -: 1054:
    #####: 1055:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1055-block  0
call    0 never executed
    #####: 1056:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1056-block  0
unconditional  1 never executed
    $$$$$: 1056-block  1
branch  2 never executed
branch  3 never executed
        -: 1057:	{
    #####: 1058:	  if (i != currentPlayer)
    $$$$$: 1058-block  0
branch  0 never executed
branch  1 never executed
        -: 1059:	    {
    #####: 1060:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1060-block  0
unconditional  0 never executed
    $$$$$: 1060-block  1
unconditional  1 never executed
    $$$$$: 1060-block  2
branch  2 never executed
branch  3 never executed
        -: 1061:		{
    #####: 1062:		  if (state->hand[i][j] == copper)
    $$$$$: 1062-block  0
branch  0 never executed
branch  1 never executed
        -: 1063:		    {
    #####: 1064:		      discardCard(j, i, state, 0);
    $$$$$: 1064-block  0
call    0 never executed
    #####: 1065:		      break;
unconditional  0 never executed
        -: 1066:		    }
    #####: 1067:		  if (j == state->handCount[i])
    $$$$$: 1067-block  0
branch  0 never executed
branch  1 never executed
        -: 1068:		    {
    #####: 1069:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1069-block  0
unconditional  0 never executed
    $$$$$: 1069-block  1
unconditional  1 never executed
    $$$$$: 1069-block  2
branch  2 never executed
branch  3 never executed
        -: 1070:			{
        -: 1071:			  if (DEBUG)
        -: 1072:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1073:			}	
    #####: 1074:		      break;
    $$$$$: 1074-block  0
unconditional  0 never executed
        -: 1075:		    }		
        -: 1076:		}
        -: 1077:					
        -: 1078:	    }
        -: 1079:				
        -: 1080:	}				
        -: 1081:
        -: 1082:      //discard played card from hand
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1083-block  0
call    0 never executed
        -: 1084:
    #####: 1085:      return 0;
unconditional  0 never executed
        -: 1086:
        -: 1087:		
        -: 1088:    case embargo: 
    #####: 1089:	embargoRef(currentPlayer, state, choice1, handPos);
    $$$$$: 1089-block  0
call    0 never executed
    #####: 1090:	break;
unconditional  0 never executed
        -: 1091:
        -: 1092:    case salvager:
        -: 1093:      //+1 buy
    #####: 1094:      state->numBuys++;
        -: 1095:			
    #####: 1096:      if (choice1)
    $$$$$: 1096-block  0
branch  0 never executed
branch  1 never executed
        -: 1097:	{
        -: 1098:	  //gain coins equal to trashed card
    #####: 1099:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1099-block  0
call    0 never executed
call    1 never executed
        -: 1100:	  //trash card
    #####: 1101:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1102:	}
        -: 1103:			
        -: 1104:      //discard card
    #####: 1105:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1105-block  0
call    0 never executed
    #####: 1106:      return 0;
unconditional  0 never executed
        -: 1107:		
        -: 1108:    case sea_hag:
    #####: 1109:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1109-block  0
unconditional  0 never executed
    $$$$$: 1109-block  1
unconditional  1 never executed
    $$$$$: 1109-block  2
branch  2 never executed
branch  3 never executed
    #####: 1110:	if (i != currentPlayer){
    $$$$$: 1110-block  0
branch  0 never executed
branch  1 never executed
    #####: 1111:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1112:	  state->discardCount[i]++;
    #####: 1113:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1113-block  0
unconditional  0 never executed
        -: 1114:	}
        -: 1115:      }
    #####: 1116:      return 0;
    $$$$$: 1116-block  0
unconditional  0 never executed
        -: 1117:		
        -: 1118:    case treasure_map:
        -: 1119:      //search hand for another treasure_map
    #####: 1120:      index = -1;
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1121-block  0
unconditional  0 never executed
    $$$$$: 1121-block  1
unconditional  1 never executed
    $$$$$: 1121-block  2
branch  2 never executed
branch  3 never executed
        -: 1122:	{
    #####: 1123:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1123-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1123-block  1
branch  2 never executed
branch  3 never executed
        -: 1124:	    {
    #####: 1125:	      index = i;
    #####: 1126:	      break;
    $$$$$: 1126-block  0
unconditional  0 never executed
        -: 1127:	    }
        -: 1128:	}
    #####: 1129:      if (index > -1)
    $$$$$: 1129-block  0
branch  0 never executed
branch  1 never executed
        -: 1130:	{
        -: 1131:	  //trash both treasure cards
    #####: 1132:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1132-block  0
call    0 never executed
    #####: 1133:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1134:
        -: 1135:	  //gain 4 Gold cards
    #####: 1136:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1136-block  0
branch  2 never executed
branch  3 never executed
        -: 1137:	    {
    #####: 1138:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1138-block  0
call    0 never executed
        -: 1139:	    }
        -: 1140:				
        -: 1141:	  //return success
    #####: 1142:	  return 1;
    $$$$$: 1142-block  0
unconditional  0 never executed
        -: 1143:	}
        -: 1144:			
        -: 1145:      //no second treasure_map found in hand
    #####: 1146:      return -1;
    $$$$$: 1146-block  0
unconditional  0 never executed
        -: 1147:    }
        -: 1148:	
     1000: 1149:  return -1;
     1000: 1149-block  0
unconditional  0 taken 1000
     1000: 1149-block  1
unconditional  1 taken 1000
        -: 1150:}
        -: 1151:
        -: 1152://steward function
function stewardRef called 0 returned 0% blocks executed 0%
    #####: 1153:int stewardRef(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos)
    $$$$$: 1153-block  0
        -: 1154:{
        -: 1155:
    #####: 1156:      if (choice1 == 1)
    $$$$$: 1156-block  0
branch  0 never executed
branch  1 never executed
        -: 1157:	{
        -: 1158:	  //+2 cards
    #####: 1159:	  drawCard(currentPlayer, state);
    $$$$$: 1159-block  0
call    0 never executed
    #####: 1160:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1161:	}
    #####: 1162:      else if (choice1 == 1) //BUG: changed choice1 value from 2 to 1
    $$$$$: 1162-block  0
branch  0 never executed
branch  1 never executed
        -: 1163:	{
        -: 1164:	  //+2 coins
    #####: 1165:	  state->coins = state->coins + 2;
    $$$$$: 1165-block  0
unconditional  0 never executed
        -: 1166:	}
        -: 1167:      else
        -: 1168:	{
        -: 1169:	  //trash 2 cards in hand
    #####: 1170:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1170-block  0
call    0 never executed
    #####: 1171:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1172:	}
        -: 1173:			
        -: 1174:      //discard card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1175-block  0
call    0 never executed
    #####: 1176:      return 0;
unconditional  0 never executed
        -: 1177:}
        -: 1178:
        -: 1179://embargo function
function embargoRef called 0 returned 0% blocks executed 0%
    #####: 1180:int embargoRef(int currentPlayer, struct gameState *state, int handPos, int choice1)
    $$$$$: 1180-block  0
        -: 1181:{
        -: 1182:
        -: 1183:      //+2 Coins
    #####: 1184:      state->coins = state->coins + 2;
        -: 1185:			
        -: 1186:      //see if selected pile is in play
    #####: 1187:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1187-block  0
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
    $$$$$: 1189-block  0
unconditional  0 never executed
        -: 1190:	}
        -: 1191:			
        -: 1192:      //add embargo token to selected supply pile
    #####: 1193:      state->embargoTokens[choice1]++;
        -: 1194:			
        -: 1195:      //trash card...BUG: No card discard.
        -: 1196:      //discardCard(handPos, currentPlayer, state, 1);		
    #####: 1197:      return 0;
    $$$$$: 1197-block  0
unconditional  0 never executed
        -: 1198:}
        -: 1199:
        -: 1200://village function
function villageRef called 0 returned 0% blocks executed 0%
    #####: 1201:int villageRef(int currentPlayer, struct gameState *state, int handPos)
    $$$$$: 1201-block  0
        -: 1202:{
        -: 1203:
        -: 1204:      //+1 Card
    #####: 1205:      drawCard(currentPlayer, state);
    $$$$$: 1205-block  0
call    0 never executed
        -: 1206:			
        -: 1207:      //+2 Actions....BUG: +3 actions
    #####: 1208:      state->numActions = state->numActions + 2;
        -: 1209:			
        -: 1210:      //discard played card from hand
    #####: 1211:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1212:      return 0;
unconditional  0 never executed
        -: 1213:}
        -: 1214:
        -: 1215://adventurer function
function adventurerRef called 1000 returned 100% blocks executed 100%
     1000: 1216:int adventurerRef(int currentPlayer, struct gameState *state)
     1000: 1216-block  0
        -: 1217:{
        -: 1218:   int temphand[MAX_HAND];
        -: 1219:   int cardDrawn;
     1000: 1220:   int drawntreasure=0;
     1000: 1221:   int z = 0;
        -: 1222:
   124304: 1223:      while(drawntreasure<2){
     1000: 1223-block  0
unconditional  0 taken 1000
   124304: 1223-block  1
branch  1 taken 123304
branch  2 taken 1000 (fallthrough)
   123304: 1224:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
   123304: 1224-block  0
branch  0 taken 245 (fallthrough)
branch  1 taken 123059
      245: 1225:	  shuffle(currentPlayer, state);
      245: 1225-block  0
call    0 returned 245
unconditional  1 taken 245
        -: 1226:	}
   123304: 1227:	drawCard(currentPlayer, state);
   123304: 1227-block  0
call    0 returned 123304
   123304: 1228:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   123304: 1229:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 121304 (fallthrough)
branch  1 taken 2000
   121304: 1229-block  0
branch  2 taken 121304 (fallthrough)
branch  3 taken 0
   121304: 1229-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 121304
     2000: 1230:	  drawntreasure++;
     2000: 1230-block  0
unconditional  0 taken 2000
        -: 1231:	else{
   121304: 1232:	  temphand[z]=cardDrawn;
   121304: 1233:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   121304: 1234:	  z++;
   121304: 1234-block  0
unconditional  0 taken 121304
        -: 1235:	}
        -: 1236:      }
   122304: 1237:      while(z-1>=0){
     1000: 1237-block  0
unconditional  0 taken 1000
   122304: 1237-block  1
branch  1 taken 121304
branch  2 taken 1000 (fallthrough)
   121304: 1238:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   121304: 1239:	z=z-1;
   121304: 1239-block  0
unconditional  0 taken 121304
        -: 1240:      }
     1000: 1241:      return 0;
     1000: 1241-block  0
unconditional  0 taken 1000
        -: 1242:}
        -: 1243://smithy function
function smithyRef called 0 returned 0% blocks executed 0%
    #####: 1244:int smithyRef(int currentPlayer, struct gameState *state, int handPos)
    $$$$$: 1244-block  0
        -: 1245:{
        -: 1246:   int i;
        -: 1247:   //+3 cards...BUG: +5 cards
    #####: 1248:   for(i=0; i<3; i++)
    $$$$$: 1248-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1248-block  1
branch  2 never executed
branch  3 never executed
        -: 1249:   {
    #####: 1250:      drawCard(currentPlayer, state);
    $$$$$: 1250-block  0
call    0 never executed
        -: 1251:   }
        -: 1252:
        -: 1253:   //discard card from hand
    #####: 1254:   discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1254-block  0
call    0 never executed
    #####: 1255:   return 0;
unconditional  0 never executed
        -: 1256:}
        -: 1257:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1258:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    $$$$$: 1258-block  0
        -: 1259:{
        -: 1260:	
        -: 1261:  //if card is not trashed, added to Played pile 
    #####: 1262:  if (trashFlag < 1)
    $$$$$: 1262-block  0
branch  0 never executed
branch  1 never executed
        -: 1263:    {
        -: 1264:      //add card to played pile
    #####: 1265:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1266:      state->playedCardCount++;
    $$$$$: 1266-block  0
unconditional  0 never executed
        -: 1267:    }
        -: 1268:	
        -: 1269:  //set played card to -1
    #####: 1270:  state->hand[currentPlayer][handPos] = -1;
        -: 1271:	
        -: 1272:  //remove card from player's hand
    #####: 1273:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1273-block  0
branch  0 never executed
branch  1 never executed
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
    $$$$$: 1276-block  0
unconditional  0 never executed
        -: 1277:    }
    #####: 1278:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1278-block  0
branch  0 never executed
branch  1 never executed
        -: 1279:    {
        -: 1280:      //reduce number of cards in hand
    #####: 1281:      state->handCount[currentPlayer]--;
    $$$$$: 1281-block  0
unconditional  0 never executed
        -: 1282:    }
        -: 1283:  else 	
        -: 1284:    {
        -: 1285:      //replace discarded card with last card in hand
    #####: 1286:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1287:      //set last card to -1
    #####: 1288:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
    $$$$$: 1290-block  0
unconditional  0 never executed
        -: 1291:    }
        -: 1292:	
    #####: 1293:  return 0;
    $$$$$: 1293-block  0
unconditional  0 never executed
        -: 1294:}
        -: 1295:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1296:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1296-block  0
        -: 1297:{
        -: 1298:  //Note: supplyPos is enum of choosen card
        -: 1299:	
        -: 1300:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1301:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1301-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1302:    {
    #####: 1303:      return -1;
    $$$$$: 1303-block  0
unconditional  0 never executed
        -: 1304:    }
        -: 1305:	
        -: 1306:  //added card for [whoseTurn] current player:
        -: 1307:  // toFlag = 0 : add to discard
        -: 1308:  // toFlag = 1 : add to deck
        -: 1309:  // toFlag = 2 : add to hand
        -: 1310:
    #####: 1311:  if (toFlag == 1)
    $$$$$: 1311-block  0
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1314:      state->deckCount[player]++;
    $$$$$: 1314-block  0
unconditional  0 never executed
        -: 1315:    }
    #####: 1316:  else if (toFlag == 2)
    $$$$$: 1316-block  0
branch  0 never executed
branch  1 never executed
        -: 1317:    {
    #####: 1318:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1319:      state->handCount[player]++;
    $$$$$: 1319-block  0
unconditional  0 never executed
        -: 1320:    }
        -: 1321:  else
        -: 1322:    {
    #####: 1323:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1324:      state->discardCount[player]++;
    $$$$$: 1324-block  0
unconditional  0 never executed
        -: 1325:    }
        -: 1326:	
        -: 1327:  //decrease number in supply pile
    #####: 1328:  state->supplyCount[supplyPos]--;
        -: 1329:	 
    #####: 1330:  return 0;
    $$$$$: 1330-block  0
unconditional  0 never executed
        -: 1331:}
        -: 1332:
function updateCoins called 1000 returned 100% blocks executed 82%
     1000: 1333:int updateCoins(int player, struct gameState *state, int bonus)
     1000: 1333-block  0
        -: 1334:{
        -: 1335:  int i;
        -: 1336:	
        -: 1337:  //reset coin count
     1000: 1338:  state->coins = 0;
        -: 1339:
        -: 1340:  //add coins for each Treasure card in player's hand
     6000: 1341:  for (i = 0; i < state->handCount[player]; i++)
     1000: 1341-block  0
unconditional  0 taken 1000
     5000: 1341-block  1
unconditional  1 taken 5000
     6000: 1341-block  2
branch  2 taken 5000
branch  3 taken 1000 (fallthrough)
        -: 1342:    {
     5000: 1343:      if (state->hand[player][i] == copper)
     5000: 1343-block  0
branch  0 taken 4000 (fallthrough)
branch  1 taken 1000
        -: 1344:	{
     4000: 1345:	  state->coins += 1;
     4000: 1345-block  0
unconditional  0 taken 4000
        -: 1346:	}
     1000: 1347:      else if (state->hand[player][i] == silver)
     1000: 1347-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1000
        -: 1348:	{
    #####: 1349:	  state->coins += 2;
    $$$$$: 1349-block  0
unconditional  0 never executed
        -: 1350:	}
     1000: 1351:      else if (state->hand[player][i] == gold)
     1000: 1351-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1000
        -: 1352:	{
    #####: 1353:	  state->coins += 3;
    $$$$$: 1353-block  0
unconditional  0 never executed
        -: 1354:	}	
        -: 1355:    }	
        -: 1356:
        -: 1357:  //add bonus
     1000: 1358:  state->coins += bonus;
        -: 1359:
     1000: 1360:  return 0;
     1000: 1360-block  0
unconditional  0 taken 1000
        -: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
