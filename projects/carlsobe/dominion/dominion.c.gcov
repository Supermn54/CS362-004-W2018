        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:int smithyRef(int currentPlayer, struct gameState *state, int handPos);
        -:   10:int adventurerRef(int currentPlayer, struct gameState *state);
        -:   11:int villageRef(int currentPlayer, struct gameState *state, int handPos);
        -:   12:int embargoRef(int currentPlayer, struct gameState *state, int handPos, int choice1);
        -:   13:int stewardRef(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos);
        -:   14:
       30:   15:int compare(const void* a, const void* b) {
       30:   16:  if (*(int*)a > *(int*)b)
    #####:   17:    return 1;
       30:   18:  if (*(int*)a < *(int*)b)
        8:   19:    return -1;
       22:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        1:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        1:   51:  SelectStream(1);
        1:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        1:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        1:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       11:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      110:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      100:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        1:   80:  if (numPlayers == 2)
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        1:   94:  if (numPlayers == 2)
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 8;
        1:   97:      state->supplyCount[duchy] = 8;
        1:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        1:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  109:  state->supplyCount[silver] = 40;
        1:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
       21:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
      165:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
      155:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       10:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
        2:  122:		  if (numPlayers == 2){ 
        1:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
        9:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       10:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
      145:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
        3:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
        2:  147:      state->deckCount[i] = 0;
        8:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
        6:  150:	  state->deck[i][j] = estate;
        6:  151:	  state->deckCount[i]++;
        -:  152:	}
       16:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       14:  155:	  state->deck[i][j] = copper;
       14:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
        3:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
        2:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
        3:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
        2:  173:      state->handCount[i] = 0;
        2:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
       28:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
       27:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        1:  189:  state->outpostPlayed = 0;
        1:  190:  state->phase = 0;
        1:  191:  state->numActions = 1;
        1:  192:  state->numBuys = 1;
        1:  193:  state->playedCardCount = 0;
        1:  194:  state->whoseTurn = 0;
        1:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
        6:  199:  for (it = 0; it < 5; it++){
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0) {
       20:  222:    card = floor(Random() * state->deckCount[player]);
       20:  223:    newDeck[newDeckPos] = state->deck[player][card];
       20:  224:    newDeckPos++;
       57:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
       37:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
       20:  228:    state->deckCount[player]--;
        -:  229:  }
       22:  230:  for (i = 0; i < newDeckPos; i++) {
       20:  231:    state->deck[player][i] = newDeck[i];
       20:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
        2:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
        1:  353:int whoseTurn(struct gameState *state) {
        1:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
    #####:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
        7:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
        7:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
    #####:  540:    for (i = 0; i < state->discardCount[player];i++){
    #####:  541:      state->deck[player][i] = state->discard[player][i];
    #####:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
    #####:  545:    state->deckCount[player] = state->discardCount[player];
    #####:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
    #####:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
    #####:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
    #####:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
    #####:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
    #####:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
    #####:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:    state->deckCount[player]--;
    #####:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
        7:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
        7:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  583:    state->deckCount[player]--;
        7:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
        7:  587:  return 0;
        -:  588:}
        -:  589:
    #####:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
        1:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        1:  660:  int currentPlayer = whoseTurn(state);
        1:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        1:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        1:  665:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  666:    nextPlayer = 0;
        -:  667:  }
        -:  668:  
        -:  669:	
        -:  670:  //uses switch to select card and perform actions
        1:  671:  switch( card ) 
        -:  672:    {
        -:  673:    case adventurer:
        1:  674:       adventurerRef(currentPlayer, state);
        1:  675:       break;
        -:  676:			
        -:  677:    case council_room:
        -:  678:      //+4 Cards
    #####:  679:      for (i = 0; i < 4; i++)
        -:  680:	{
    #####:  681:	  drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:			
        -:  684:      //+1 Buy
    #####:  685:      state->numBuys++;
        -:  686:			
        -:  687:      //Each other player draws a card
    #####:  688:      for (i = 0; i < state->numPlayers; i++)
        -:  689:	{
    #####:  690:	  if ( i != currentPlayer )
        -:  691:	    {
    #####:  692:	      drawCard(i, state);
        -:  693:	    }
        -:  694:	}
        -:  695:			
        -:  696:      //put played card in played card pile
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
        -:  698:			
    #####:  699:      return 0;
        -:  700:			
        -:  701:    case feast:
        -:  702:      //gain card with cost up to 5
        -:  703:      //Backup hand
    #####:  704:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  705:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  706:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  707:      }
        -:  708:      //Backup hand
        -:  709:
        -:  710:      //Update Coins for Buy
    #####:  711:      updateCoins(currentPlayer, state, 5);
    #####:  712:      x = 1;//Condition to loop on
    #####:  713:      while( x == 1) {//Buy one card
    #####:  714:	if (supplyCount(choice1, state) <= 0){
        -:  715:	  if (DEBUG)
        -:  716:	    printf("None of that card left, sorry!\n");
        -:  717:
        -:  718:	  if (DEBUG){
        -:  719:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  720:	  }
        -:  721:	}
    #####:  722:	else if (state->coins < getCost(choice1)){
    #####:  723:	  printf("That card is too expensive!\n");
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  727:	  }
        -:  728:	}
        -:  729:	else{
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:	  }
        -:  734:
    #####:  735:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  736:	  x = 0;//No more buying cards
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  740:	  }
        -:  741:
        -:  742:	}
        -:  743:      }     
        -:  744:
        -:  745:      //Reset Hand
    #####:  746:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  747:	state->hand[currentPlayer][i] = temphand[i];
    #####:  748:	temphand[i] = -1;
        -:  749:      }
        -:  750:      //Reset Hand
        -:  751:      			
    #####:  752:      return 0;
        -:  753:			
        -:  754:    case gardens:
    #####:  755:      return -1;
        -:  756:			
        -:  757:    case mine:
    #####:  758:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  759:
    #####:  760:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:		
    #####:  765:      if (choice2 > treasure_map || choice2 < curse)
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      gainCard(choice2, state, 2, currentPlayer);
        -:  776:
        -:  777:      //discard card from hand
    #####:  778:      discardCard(handPos, currentPlayer, state, 0);
        -:  779:
        -:  780:      //discard trashed card
    #####:  781:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  782:	{
    #####:  783:	  if (state->hand[currentPlayer][i] == j)
        -:  784:	    {
    #####:  785:	      discardCard(i, currentPlayer, state, 0);			
    #####:  786:	      break;
        -:  787:	    }
        -:  788:	}
        -:  789:			
    #####:  790:      return 0;
        -:  791:			
        -:  792:    case remodel:
    #####:  793:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  794:
    #####:  795:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  796:	{
    #####:  797:	  return -1;
        -:  798:	}
        -:  799:
    #####:  800:      gainCard(choice2, state, 0, currentPlayer);
        -:  801:
        -:  802:      //discard card from hand
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:
        -:  805:      //discard trashed card
    #####:  806:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  807:	{
    #####:  808:	  if (state->hand[currentPlayer][i] == j)
        -:  809:	    {
    #####:  810:	      discardCard(i, currentPlayer, state, 0);			
    #####:  811:	      break;
        -:  812:	    }
        -:  813:	}
        -:  814:
        -:  815:
    #####:  816:      return 0;
        -:  817:		
        -:  818:    case smithy:
    #####:  819:      smithyRef(currentPlayer, state, handPos);
    #####:  820:      break;
        -:  821:		
        -:  822:    case village:
    #####:  823:	villageRef(currentPlayer, state, handPos);
    #####:  824:	break;
        -:  825:
        -:  826:    case baron:
    #####:  827:      state->numBuys++;//Increase buys by 1!
    #####:  828:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  829:	int p = 0;//Iterator for hand!
    #####:  830:	int card_not_discarded = 1;//Flag for discard set!
    #####:  831:	while(card_not_discarded){
    #####:  832:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  833:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  834:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  835:	    state->discardCount[currentPlayer]++;
    #####:  836:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  837:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  838:	    }
    #####:  839:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  840:	    state->handCount[currentPlayer]--;
    #####:  841:	    card_not_discarded = 0;//Exit the loop
        -:  842:	  }
    #####:  843:	  else if (p > state->handCount[currentPlayer]){
        -:  844:	    if(DEBUG) {
        -:  845:	      printf("No estate cards in your hand, invalid choice\n");
        -:  846:	      printf("Must gain an estate if there are any\n");
        -:  847:	    }
    #####:  848:	    if (supplyCount(estate, state) > 0){
    #####:  849:	      gainCard(estate, state, 0, currentPlayer);
    #####:  850:	      state->supplyCount[estate]--;//Decrement estates
    #####:  851:	      if (supplyCount(estate, state) == 0){
    #####:  852:		isGameOver(state);
        -:  853:	      }
        -:  854:	    }
    #####:  855:	    card_not_discarded = 0;//Exit the loop
        -:  856:	  }
        -:  857:			    
        -:  858:	  else{
    #####:  859:	    p++;//Next card
        -:  860:	  }
        -:  861:	}
        -:  862:      }
        -:  863:			    
        -:  864:      else{
    #####:  865:	if (supplyCount(estate, state) > 0){
    #####:  866:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  867:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  868:	  if (supplyCount(estate, state) == 0){
    #####:  869:	    isGameOver(state);
        -:  870:	  }
        -:  871:	}
        -:  872:      }
        -:  873:	    
        -:  874:      
    #####:  875:      return 0;
        -:  876:		
        -:  877:    case great_hall:
        -:  878:      //+1 Card
    #####:  879:      drawCard(currentPlayer, state);
        -:  880:			
        -:  881:      //+1 Actions
    #####:  882:      state->numActions++;
        -:  883:			
        -:  884:      //discard card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case minion:
        -:  889:      //+1 action
    #####:  890:      state->numActions++;
        -:  891:			
        -:  892:      //discard card from hand
    #####:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
    #####:  895:      if (choice1)		//+2 coins
        -:  896:	{
    #####:  897:	  state->coins = state->coins + 2;
        -:  898:	}
        -:  899:			
    #####:  900:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  901:	{
        -:  902:	  //discard hand
    #####:  903:	  while(numHandCards(state) > 0)
        -:  904:	    {
    #####:  905:	      discardCard(handPos, currentPlayer, state, 0);
        -:  906:	    }
        -:  907:				
        -:  908:	  //draw 4
    #####:  909:	  for (i = 0; i < 4; i++)
        -:  910:	    {
    #####:  911:	      drawCard(currentPlayer, state);
        -:  912:	    }
        -:  913:				
        -:  914:	  //other players discard hand and redraw if hand size > 4
    #####:  915:	  for (i = 0; i < state->numPlayers; i++)
        -:  916:	    {
    #####:  917:	      if (i != currentPlayer)
        -:  918:		{
    #####:  919:		  if ( state->handCount[i] > 4 )
        -:  920:		    {
        -:  921:		      //discard hand
    #####:  922:		      while( state->handCount[i] > 0 )
        -:  923:			{
    #####:  924:			  discardCard(handPos, i, state, 0);
        -:  925:			}
        -:  926:							
        -:  927:		      //draw 4
    #####:  928:		      for (j = 0; j < 4; j++)
        -:  929:			{
    #####:  930:			  drawCard(i, state);
        -:  931:			}
        -:  932:		    }
        -:  933:		}
        -:  934:	    }
        -:  935:				
        -:  936:	}
    #####:  937:      return 0;
        -:  938:		
        -:  939:    case steward:
    #####:  940:	stewardRef(currentPlayer, state, choice1, choice2, choice3, handPos);
    #####:  941:	break;
        -:  942:
        -:  943:    case tribute:
    #####:  944:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  945:	if (state->deckCount[nextPlayer] > 0){
    #####:  946:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  947:	  state->deckCount[nextPlayer]--;
        -:  948:	}
    #####:  949:	else if (state->discardCount[nextPlayer] > 0){
    #####:  950:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  951:	  state->discardCount[nextPlayer]--;
        -:  952:	}
        -:  953:	else{
        -:  954:	  //No Card to Reveal
        -:  955:	  if (DEBUG){
        -:  956:	    printf("No cards to reveal\n");
        -:  957:	  }
        -:  958:	}
        -:  959:      }
        -:  960:	    
        -:  961:      else{
    #####:  962:	if (state->deckCount[nextPlayer] == 0){
    #####:  963:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  964:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  965:	    state->deckCount[nextPlayer]++;
    #####:  966:	    state->discard[nextPlayer][i] = -1;
    #####:  967:	    state->discardCount[nextPlayer]--;
        -:  968:	  }
        -:  969:			    
    #####:  970:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  971:	} 
    #####:  972:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
    #####:  975:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  976:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  977:	state->deckCount[nextPlayer]--;
        -:  978:      }    
        -:  979:		       
    #####:  980:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  981:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  982:	state->playedCardCount++;
    #####:  983:	tributeRevealedCards[1] = -1;
        -:  984:      }
        -:  985:
    #####:  986:      for (i = 0; i <= 2; i ++){
    #####:  987:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  988:	  state->coins += 2;
        -:  989:	}
        -:  990:		    
    #####:  991:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  992:	  drawCard(currentPlayer, state);
    #####:  993:	  drawCard(currentPlayer, state);
        -:  994:	}
        -:  995:	else{//Action Card
    #####:  996:	  state->numActions = state->numActions + 2;
        -:  997:	}
        -:  998:      }
        -:  999:	    
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case ambassador:
    #####: 1003:      j = 0;		//used to check if player has enough cards to discard
        -: 1004:
    #####: 1005:      if (choice2 > 2 || choice2 < 0)
        -: 1006:	{
    #####: 1007:	  return -1;				
        -: 1008:	}
        -: 1009:
    #####: 1010:      if (choice1 == handPos)
        -: 1011:	{
    #####: 1012:	  return -1;
        -: 1013:	}
        -: 1014:
    #####: 1015:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:	{
    #####: 1017:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1018:	    {
    #####: 1019:	      j++;
        -: 1020:	    }
        -: 1021:	}
    #####: 1022:      if (j < choice2)
        -: 1023:	{
    #####: 1024:	  return -1;				
        -: 1025:	}
        -: 1026:
        -: 1027:      if (DEBUG) 
        -: 1028:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1029:
        -: 1030:      //increase supply count for choosen card by amount being discarded
    #####: 1031:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1032:			
        -: 1033:      //each other player gains a copy of revealed card
    #####: 1034:      for (i = 0; i < state->numPlayers; i++)
        -: 1035:	{
    #####: 1036:	  if (i != currentPlayer)
        -: 1037:	    {
    #####: 1038:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1039:	    }
        -: 1040:	}
        -: 1041:
        -: 1042:      //discard played card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1044:
        -: 1045:      //trash copies of cards returned to supply
    #####: 1046:      for (j = 0; j < choice2; j++)
        -: 1047:	{
    #####: 1048:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1049:	    {
    #####: 1050:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1051:		{
    #####: 1052:		  discardCard(i, currentPlayer, state, 1);
    #####: 1053:		  break;
        -: 1054:		}
        -: 1055:	    }
        -: 1056:	}			
        -: 1057:
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case cutpurse:
        -: 1061:
    #####: 1062:      updateCoins(currentPlayer, state, 2);
    #####: 1063:      for (i = 0; i < state->numPlayers; i++)
        -: 1064:	{
    #####: 1065:	  if (i != currentPlayer)
        -: 1066:	    {
    #####: 1067:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1068:		{
    #####: 1069:		  if (state->hand[i][j] == copper)
        -: 1070:		    {
    #####: 1071:		      discardCard(j, i, state, 0);
    #####: 1072:		      break;
        -: 1073:		    }
    #####: 1074:		  if (j == state->handCount[i])
        -: 1075:		    {
    #####: 1076:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1077:			{
        -: 1078:			  if (DEBUG)
        -: 1079:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1080:			}	
    #####: 1081:		      break;
        -: 1082:		    }		
        -: 1083:		}
        -: 1084:					
        -: 1085:	    }
        -: 1086:				
        -: 1087:	}				
        -: 1088:
        -: 1089:      //discard played card from hand
    #####: 1090:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1091:
    #####: 1092:      return 0;
        -: 1093:
        -: 1094:		
        -: 1095:    case embargo: 
    #####: 1096:	embargoRef(currentPlayer, state, choice1, handPos);
    #####: 1097:	break;
        -: 1098:
        -: 1099:    case salvager:
        -: 1100:      //+1 buy
    #####: 1101:      state->numBuys++;
        -: 1102:			
    #####: 1103:      if (choice1)
        -: 1104:	{
        -: 1105:	  //gain coins equal to trashed card
    #####: 1106:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1107:	  //trash card
    #####: 1108:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1109:	}
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case sea_hag:
    #####: 1116:      for (i = 0; i < state->numPlayers; i++){
    #####: 1117:	if (i != currentPlayer){
    #####: 1118:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1119:	  state->discardCount[i]++;
    #####: 1120:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1121:	}
        -: 1122:      }
    #####: 1123:      return 0;
        -: 1124:		
        -: 1125:    case treasure_map:
        -: 1126:      //search hand for another treasure_map
    #####: 1127:      index = -1;
    #####: 1128:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1129:	{
    #####: 1130:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1131:	    {
    #####: 1132:	      index = i;
    #####: 1133:	      break;
        -: 1134:	    }
        -: 1135:	}
    #####: 1136:      if (index > -1)
        -: 1137:	{
        -: 1138:	  //trash both treasure cards
    #####: 1139:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1140:	  discardCard(index, currentPlayer, state, 1);
        -: 1141:
        -: 1142:	  //gain 4 Gold cards
    #####: 1143:	  for (i = 0; i < 4; i++)
        -: 1144:	    {
    #####: 1145:	      gainCard(gold, state, 1, currentPlayer);
        -: 1146:	    }
        -: 1147:				
        -: 1148:	  //return success
    #####: 1149:	  return 1;
        -: 1150:	}
        -: 1151:			
        -: 1152:      //no second treasure_map found in hand
    #####: 1153:      return -1;
        -: 1154:    }
        -: 1155:	
        1: 1156:  return -1;
        -: 1157:}
        -: 1158:
        -: 1159://steward function
    #####: 1160:int stewardRef(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos)
        -: 1161:{
        -: 1162:
    #####: 1163:      if (choice1 == 1)
        -: 1164:	{
        -: 1165:	  //+2 cards
    #####: 1166:	  drawCard(currentPlayer, state);
    #####: 1167:	  drawCard(currentPlayer, state);
        -: 1168:	}
    #####: 1169:      else if (choice1 == 1) //BUG: changed choice1 value from 2 to 1
        -: 1170:	{
        -: 1171:	  //+2 coins
    #####: 1172:	  state->coins = state->coins + 2;
        -: 1173:	}
        -: 1174:      else
        -: 1175:	{
        -: 1176:	  //trash 2 cards in hand
    #####: 1177:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1178:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1179:	}
        -: 1180:			
        -: 1181:      //discard card from hand
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1183:      return 0;
        -: 1184:}
        -: 1185:
        -: 1186://embargo function
    #####: 1187:int embargoRef(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1188:{
        -: 1189:
        -: 1190:      //+2 Coins
    #####: 1191:      state->coins = state->coins + 2;
        -: 1192:			
        -: 1193:      //see if selected pile is in play
    #####: 1194:      if ( state->supplyCount[choice1] == -1 )
        -: 1195:	{
    #####: 1196:	  return -1;
        -: 1197:	}
        -: 1198:			
        -: 1199:      //add embargo token to selected supply pile
    #####: 1200:      state->embargoTokens[choice1]++;
        -: 1201:			
        -: 1202:      //trash card...BUG: No card discard.
        -: 1203:      //discardCard(handPos, currentPlayer, state, 1);		
    #####: 1204:      return 0;
        -: 1205:}
        -: 1206:
        -: 1207://village function
    #####: 1208:int villageRef(int currentPlayer, struct gameState *state, int handPos)
        -: 1209:{
        -: 1210:
        -: 1211:      //+1 Card
    #####: 1212:      drawCard(currentPlayer, state);
        -: 1213:			
        -: 1214:      //+2 Actions....BUG: +3 actions
    #####: 1215:      state->numActions = state->numActions + 3;
        -: 1216:			
        -: 1217:      //discard played card from hand
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:}
        -: 1221:
        -: 1222://adventurer function
        1: 1223:int adventurerRef(int currentPlayer, struct gameState *state)
        -: 1224:{
        -: 1225:   int temphand[MAX_HAND];
        -: 1226:   int cardDrawn;
        1: 1227:   int drawntreasure=0;
        1: 1228:   int z = 0;
        -: 1229:
        4: 1230:      while(drawntreasure<2){
        2: 1231:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1232:	  shuffle(currentPlayer, state);
        -: 1233:	}
        2: 1234:	drawCard(currentPlayer, state);
        2: 1235:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2: 1236:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2: 1237:	  drawntreasure++;
        -: 1238:	else{
    #####: 1239:	  temphand[z]=cardDrawn;
    #####: 1240:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1241:	  z++;
        -: 1242:	}
        -: 1243:      }
        2: 1244:      while(z-1>=0){
    #####: 1245:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1246:	z=z-1;
        -: 1247:      }
        1: 1248:      return 0;
        -: 1249:}
        -: 1250://smithy function
    #####: 1251:int smithyRef(int currentPlayer, struct gameState *state, int handPos)
        -: 1252:{
        -: 1253:   int i;
        -: 1254:   //+3 cards...BUG: +5 cards
    #####: 1255:   for(i=0; i<5; i++)
        -: 1256:   {
    #####: 1257:      drawCard(currentPlayer, state);
        -: 1258:   }
        -: 1259:
        -: 1260:   //discard card from hand
    #####: 1261:   discardCard(handPos, currentPlayer, state, 0);
    #####: 1262:   return 0;
        -: 1263:}
        -: 1264:
    #####: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
    #####: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
    #####: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
    #####: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
    #####: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
    #####: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
    #####: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
    #####: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
    #####: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
        1: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
        1: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
        6: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
        5: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
        4: 1352:	  state->coins += 1;
        -: 1353:	}
        1: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
        1: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
        1: 1365:  state->coins += bonus;
        -: 1366:
        1: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
